//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TA.Window.FBooking {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PassengerInfo", Namespace="http://schemas.datacontract.org/2004/07/WcfFlightService")]
    [System.SerializableAttribute()]
    public partial class PassengerInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime expiryDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passengerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passportNoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime expiryDate {
            get {
                return this.expiryDateField;
            }
            set {
                if ((this.expiryDateField.Equals(value) != true)) {
                    this.expiryDateField = value;
                    this.RaisePropertyChanged("expiryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string passengerName {
            get {
                return this.passengerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.passengerNameField, value) != true)) {
                    this.passengerNameField = value;
                    this.RaisePropertyChanged("passengerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string passportNo {
            get {
                return this.passportNoField;
            }
            set {
                if ((object.ReferenceEquals(this.passportNoField, value) != true)) {
                    this.passportNoField = value;
                    this.RaisePropertyChanged("passportNo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaymentInfo", Namespace="http://schemas.datacontract.org/2004/07/WcfFlightService")]
    [System.SerializableAttribute()]
    public partial class PaymentInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cardholdernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cardnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cv2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime expiryDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cardholdername {
            get {
                return this.cardholdernameField;
            }
            set {
                if ((object.ReferenceEquals(this.cardholdernameField, value) != true)) {
                    this.cardholdernameField = value;
                    this.RaisePropertyChanged("cardholdername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cardname {
            get {
                return this.cardnameField;
            }
            set {
                if ((object.ReferenceEquals(this.cardnameField, value) != true)) {
                    this.cardnameField = value;
                    this.RaisePropertyChanged("cardname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cv2 {
            get {
                return this.cv2Field;
            }
            set {
                if ((object.ReferenceEquals(this.cv2Field, value) != true)) {
                    this.cv2Field = value;
                    this.RaisePropertyChanged("cv2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime expiryDate {
            get {
                return this.expiryDateField;
            }
            set {
                if ((this.expiryDateField.Equals(value) != true)) {
                    this.expiryDateField = value;
                    this.RaisePropertyChanged("expiryDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="WcfFlightService", ConfigurationName="FBooking.IFlightBookingService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IFlightBookingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="WcfFlightService/IFlightBookingService/makeReservation", ReplyAction="WcfFlightService/IFlightBookingService/makeReservationResponse")]
        bool makeReservation(string sStartCityCode, string sEndCityCode, System.DateTime dtFlightDate, TA.Window.FBooking.PassengerInfo[] passengers, TA.Window.FBooking.PaymentInfo pInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="WcfFlightService/IFlightBookingService/checkAvailability", ReplyAction="WcfFlightService/IFlightBookingService/checkAvailabilityResponse")]
        bool checkAvailability(string sStartCityCode, string sEndCityCode, System.DateTime dtFlightDate, int iNumSeats);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFlightBookingServiceChannel : TA.Window.FBooking.IFlightBookingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FlightBookingServiceClient : System.ServiceModel.ClientBase<TA.Window.FBooking.IFlightBookingService>, TA.Window.FBooking.IFlightBookingService {
        
        public FlightBookingServiceClient() {
        }
        
        public FlightBookingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FlightBookingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FlightBookingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FlightBookingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool makeReservation(string sStartCityCode, string sEndCityCode, System.DateTime dtFlightDate, TA.Window.FBooking.PassengerInfo[] passengers, TA.Window.FBooking.PaymentInfo pInfo) {
            return base.Channel.makeReservation(sStartCityCode, sEndCityCode, dtFlightDate, passengers, pInfo);
        }
        
        public bool checkAvailability(string sStartCityCode, string sEndCityCode, System.DateTime dtFlightDate, int iNumSeats) {
            return base.Channel.checkAvailability(sStartCityCode, sEndCityCode, dtFlightDate, iNumSeats);
        }
    }
}
