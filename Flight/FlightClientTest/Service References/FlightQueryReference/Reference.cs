//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlightClientTest.FlightQueryReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DestinationInfo", Namespace="http://schemas.datacontract.org/2004/07/WcfFlightService")]
    [System.SerializableAttribute()]
    public partial class DestinationInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityCode {
            get {
                return this.CityCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CityCodeField, value) != true)) {
                    this.CityCodeField = value;
                    this.RaisePropertyChanged("CityCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityName {
            get {
                return this.CityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CityNameField, value) != true)) {
                    this.CityNameField = value;
                    this.RaisePropertyChanged("CityName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FlightInfo", Namespace="http://schemas.datacontract.org/2004/07/WcfFlightService")]
    [System.SerializableAttribute()]
    public partial class FlightInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AdultRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ChildRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DepartureTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DestinationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DestinationCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FlightNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumSeatsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StartCityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StartCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AdultRate {
            get {
                return this.AdultRateField;
            }
            set {
                if ((this.AdultRateField.Equals(value) != true)) {
                    this.AdultRateField = value;
                    this.RaisePropertyChanged("AdultRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ChildRate {
            get {
                return this.ChildRateField;
            }
            set {
                if ((this.ChildRateField.Equals(value) != true)) {
                    this.ChildRateField = value;
                    this.RaisePropertyChanged("ChildRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="Departure Time")]
        public System.DateTime DepartureTime {
            get {
                return this.DepartureTimeField;
            }
            set {
                if ((this.DepartureTimeField.Equals(value) != true)) {
                    this.DepartureTimeField = value;
                    this.RaisePropertyChanged("DepartureTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Destination {
            get {
                return this.DestinationField;
            }
            set {
                if ((object.ReferenceEquals(this.DestinationField, value) != true)) {
                    this.DestinationField = value;
                    this.RaisePropertyChanged("Destination");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DestinationCode {
            get {
                return this.DestinationCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.DestinationCodeField, value) != true)) {
                    this.DestinationCodeField = value;
                    this.RaisePropertyChanged("DestinationCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightName {
            get {
                return this.FlightNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightNameField, value) != true)) {
                    this.FlightNameField = value;
                    this.RaisePropertyChanged("FlightName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumSeats {
            get {
                return this.NumSeatsField;
            }
            set {
                if ((this.NumSeatsField.Equals(value) != true)) {
                    this.NumSeatsField = value;
                    this.RaisePropertyChanged("NumSeats");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StartCity {
            get {
                return this.StartCityField;
            }
            set {
                if ((object.ReferenceEquals(this.StartCityField, value) != true)) {
                    this.StartCityField = value;
                    this.RaisePropertyChanged("StartCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StartCode {
            get {
                return this.StartCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.StartCodeField, value) != true)) {
                    this.StartCodeField = value;
                    this.RaisePropertyChanged("StartCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="WcfFlightService", ConfigurationName="FlightQueryReference.IFlightQueryService", CallbackContract=typeof(FlightClientTest.FlightQueryReference.IFlightQueryServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IFlightQueryService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfFlightService/IFlightQueryService/getAllFlightIDs")]
        void getAllFlightIDs(string sStartCityCode, string sEndCityCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfFlightService/IFlightQueryService/getListOfDestinations")]
        void getListOfDestinations();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfFlightService/IFlightQueryService/getListOfAllFlightsBetweenCities")]
        void getListOfAllFlightsBetweenCities(string sStartCityCode, string sEndCityCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfFlightService/IFlightQueryService/getListOfAllAvailableFlightsBetweenCitiesOnD" +
            "ates")]
        void getListOfAllAvailableFlightsBetweenCitiesOnDates(string sStartCityCode, string sEndCityCode, System.DateTime dtStartDate, System.DateTime dtEndDate);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfFlightService/IFlightQueryService/checkIfAvailable")]
        void checkIfAvailable(string sStartCityCode, string sEndCityCode, System.DateTime dtFlightDate, int iNumSeats);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFlightQueryServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfFlightService/IFlightQueryService/OnFlightIDQueryCallback")]
        void OnFlightIDQueryCallback(string[] flights);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfFlightService/IFlightQueryService/onDestinationQueryCallback")]
        void onDestinationQueryCallback(FlightClientTest.FlightQueryReference.DestinationInfo[] destinations);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfFlightService/IFlightQueryService/onAvailabilityQueryCallback")]
        void onAvailabilityQueryCallback(bool status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WcfFlightService/IFlightQueryService/onFlightInfoQueryCallback")]
        void onFlightInfoQueryCallback(FlightClientTest.FlightQueryReference.FlightInfo[] flights);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFlightQueryServiceChannel : FlightClientTest.FlightQueryReference.IFlightQueryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FlightQueryServiceClient : System.ServiceModel.DuplexClientBase<FlightClientTest.FlightQueryReference.IFlightQueryService>, FlightClientTest.FlightQueryReference.IFlightQueryService {
        
        public FlightQueryServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FlightQueryServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FlightQueryServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FlightQueryServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FlightQueryServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void getAllFlightIDs(string sStartCityCode, string sEndCityCode) {
            base.Channel.getAllFlightIDs(sStartCityCode, sEndCityCode);
        }
        
        public void getListOfDestinations() {
            base.Channel.getListOfDestinations();
        }
        
        public void getListOfAllFlightsBetweenCities(string sStartCityCode, string sEndCityCode) {
            base.Channel.getListOfAllFlightsBetweenCities(sStartCityCode, sEndCityCode);
        }
        
        public void getListOfAllAvailableFlightsBetweenCitiesOnDates(string sStartCityCode, string sEndCityCode, System.DateTime dtStartDate, System.DateTime dtEndDate) {
            base.Channel.getListOfAllAvailableFlightsBetweenCitiesOnDates(sStartCityCode, sEndCityCode, dtStartDate, dtEndDate);
        }
        
        public void checkIfAvailable(string sStartCityCode, string sEndCityCode, System.DateTime dtFlightDate, int iNumSeats) {
            base.Channel.checkIfAvailable(sStartCityCode, sEndCityCode, dtFlightDate, iNumSeats);
        }
    }
}
